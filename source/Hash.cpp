// Includes and Namespaces
#include "CoreKMS.h"
#include "Crypto.h"
#include "Hash.h"

#pragma region Tables

// Precomputed Key Schedule
static const BYTE AesKeyV4[] = {
	0x05, 0x3D, 0x83, 0x07, 0xF9, 0xE5, 0xF0, 0x88, 0xEB, 0x5E, 0xA6, 0x68, 0x6C, 0xF0, 0x37, 0xC7,
	0xE4, 0xEF, 0xD2, 0xD6, 0xDB, 0x88, 0x75, 0x6E, 0x22, 0x6D, 0x85, 0xE6, 0xC9, 0x33, 0x23, 0x8E,
	0xA5, 0xC3, 0x14, 0x49, 0x41, 0x2C, 0xC6, 0x9F, 0xA8, 0x3C, 0xAE, 0xED, 0x8A, 0x51, 0x2B, 0x0B,
	0x43, 0x62, 0x08, 0x85, 0xE6, 0xA1, 0x1C, 0xCC, 0xA7, 0x8D, 0xDA, 0x53, 0xF1, 0x6B, 0x43, 0xB1,
	0x7B, 0x3A, 0x68, 0xBA, 0x38, 0x58, 0x60, 0x3F, 0xDE, 0xF9, 0x7C, 0xF3, 0x79, 0x74, 0xA6, 0xA0,
	0x6B, 0x4F, 0xA3, 0x07, 0x10, 0x75, 0xCB, 0xBD, 0x28, 0x2D, 0xAB, 0x82, 0xF6, 0xD4, 0xD7, 0x71,
	0x8F, 0xA0, 0x71, 0xD1, 0x9B, 0xEC, 0x9D, 0x74, 0x8B, 0x99, 0x56, 0xC9, 0xA3, 0xB4, 0xFD, 0x4B,
	0x55, 0x60, 0x2A, 0x3A, 0xDA, 0xC0, 0x5B, 0xEB, 0x01, 0xD5, 0x74, 0x23, 0x8A, 0x4C, 0x22, 0xEA,
	0x29, 0xF8, 0xDF, 0xA1, 0x7C, 0x98, 0xF5, 0x9B, 0xA6, 0x58, 0xAE, 0x70, 0x2B, 0x31, 0x25, 0x07,
	0xA1, 0x7D, 0x07, 0xED, 0x88, 0x85, 0xD8, 0x4C, 0xF4, 0x1D, 0x2D, 0xD7, 0x52, 0x45, 0x83, 0xA7,
	0xC5, 0xDD, 0x79, 0x07, 0x64, 0xA0, 0x7E, 0xEA, 0xEC, 0x25, 0xA6, 0xA6, 0x18, 0x38, 0x8B, 0x71,
	0x4A, 0x7D, 0x08, 0xD6, 0x21, 0xED, 0x8F, 0xD1, 0x45, 0x4D, 0xF1, 0x3B, 0xA9, 0x68, 0x57, 0x9D
};

// Rijndael SBox
static const BYTE SubTable[256] =
{
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

#pragma endregion

#pragma region Structs

HMAC_KEYBLOB Hmac_keyblob = {
	// Type, Version, Algorithm
	{PLAINTEXTKEYBLOB, CUR_BLOB_VERSION, NULL, CALG_RC2},
	// Key length
	16,
	// Key
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#pragma endregion

#pragma region Helpers

// Rijndael AddRoundKey
void HashAddRoundKey(PBYTE const hash, DWORD round)
{
	for (DWORD i = 0; i < 16; i++)
		hash[i] ^= AesKeyV4[(round << 4) + i];
}

// Xor Buffer
void HashXorBuffer(PBYTE const source, PBYTE const destination, DWORD size)
{
	for (DWORD i = 0; i < size; i++)
		destination[i] ^= source[i];
}

// Rijndael SBox
void HashSubBytes(PBYTE const pBytes)
{
	for(DWORD i = 0; i < 16; i++)
		pBytes[i] = SubTable[pBytes[i]];
}

// Rijndael ShiftRows
void HashShiftRows(PBYTE const pBytes)
{
	BYTE bIn[16];
	memcpy(bIn, pBytes, 16);

	for (DWORD i = 0; i < 16; i++)
		pBytes[i] = bIn[(i + ((i & 3) << 2)) & 0xf];
}

// Rijndael MixColumns
void HashMixColumns(PBYTE const pBytes)
{
	BYTE column[5];

	for (DWORD i = 0; i < 16; i += 4)
	{
		*(PDWORD) column = *(PDWORD) &pBytes[i];
		column[4] = column[0] ^ column[1] ^ column[2] ^ column[3];

		pBytes[i] = MULx2(column[0] ^ column[1]) ^ column[4];
		pBytes[i | 1] = MULx2(column[1] ^ column[2]) ^ column[4];
		pBytes[i | 2] = MULx2(column[2] ^ column[3]) ^ column[4];
		pBytes[i | 3] = MULx2(column[3] ^ column[0]) ^ column[4];

		*(PDWORD) &pBytes[i] ^= *(PDWORD) column;
	}
}

// Rijndael Block
void Hash(PBYTE const hash)
{
	HashAddRoundKey(hash, 0);

	for (DWORD i = 1; i < 11; i++){
		HashSubBytes(hash);
		HashShiftRows(hash);
		HashMixColumns(hash);
		HashAddRoundKey(hash, i);
	}

	HashSubBytes(hash);
	HashShiftRows(hash);
	HashAddRoundKey(hash, 11);
}

#pragma endregion

// Get Hash
void GetHash(DWORD MessageSize, PBYTE const Message, PBYTE const hash)
{
	DWORD i, j, k;

	// MessageSize / Blocksize
	j = MessageSize >> 4;

	// Remainding Bytes
	k = MessageSize & 0xf;

	// Hash
	for (i = 0; i < j; i++){
		HashXorBuffer(&Message[i << 4], hash, 16);
		Hash(hash);
	}

	// Bit Padding
	hash[k] ^= 0x80;

	HashXorBuffer(&Message[i << 4], hash, k);
	Hash(hash);
}

// Generate SHA-256 Hash with Win32 Crypt API Provider
void GetHashSHA256(DWORD dataSize, PBYTE const data, PBYTE const Hash)
{
	HCRYPTPROV hProv = NULL;
	HCRYPTHASH hHash = NULL;
	DWORD HashSize = HASH_SIZE_SHA256;

	if(!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT))
		return;

	CryptCreateHash(hProv, CALG_SHA_256, NULL, NULL, &hHash);
	CryptHashData(hHash, data, dataSize, NULL);
	CryptGetHashParam(hHash, HP_HASHVAL, Hash, &HashSize, NULL);

	if(hHash)
		CryptDestroyHash(hHash);

	if(hProv)
		CryptReleaseContext(hProv, NULL);
}

// Generate time based HMAC key
void GetHmacKey(FILETIME* timestamp, PBYTE hmackey)
{
	BYTE Sha256Hash[32];
	QWORD t, c1, c2, c3, seed;

	t = *(PQWORD)timestamp;
	c1 = 0x00000022816889BD;
	c2 = 0x000000208CBAB5ED;
	c3 = 0x3156CD5AC628477A;
	seed = ((t / c1) * c2) + c3;

	GetHashSHA256(8, (PBYTE)&seed, Sha256Hash);
	memcpy(hmackey, Sha256Hash+16, 16);
}

// Generate HMAC-SHA-256
void GetHmacSHA256(DWORD dwDataLen, PBYTE const pbData, PBYTE const pbHash)
{
	HCRYPTPROV hProv = NULL;
	HCRYPTKEY hKey = NULL;
	HCRYPTHASH hHmacHash = NULL;
	HMAC_INFO HmacInfo = {0};
	DWORD dwHmacSize = 32;

	HmacInfo.HashAlgid = CALG_SHA_256;

	if(!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT))
		return;

	CryptImportKey(hProv, (PBYTE)&Hmac_keyblob, sizeof(HMAC_KEYBLOB), NULL, NULL, &hKey);
	CryptCreateHash(hProv, CALG_HMAC, hKey, NULL, &hHmacHash);
	CryptSetHashParam(hHmacHash, HP_HMAC_INFO, (PBYTE)&HmacInfo, NULL);
	CryptHashData(hHmacHash, pbData, dwDataLen, NULL);
	CryptGetHashParam(hHmacHash, HP_HASHVAL, pbHash, &dwHmacSize, NULL);

	if(hKey)
		CryptDestroyKey(hKey);

	if(hHmacHash)
		CryptDestroyHash(hHmacHash);

	if(hProv)
		CryptReleaseContext(hProv, NULL);
}